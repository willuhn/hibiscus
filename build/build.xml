<?xml version="1.0" encoding="ISO-8859-1"?>

<project basedir=".." default="all" name="All">

  <target name="init" description="inits the build">

    <property environment="env" />
    <property name="build.dir" value="build" />
    <buildnumber file="${build.dir}/BUILD" />
    <xmlproperty file="plugin.xml" collapseattributes="true"/>

    <!-- create tag -->
    <propertyfile file="${build.dir}/TAG">
      <entry key="mytag" value="${plugin.version}" />
    </propertyfile>
    <replaceregexp flags="g" file="${build.dir}/TAG" match="\." replace="_" />
    <loadproperties srcFile="${build.dir}/TAG"/>
    <delete file="${build.dir}/TAG" />
    <property name="tag" value="V_${mytag}_BUILD_${build.number}" />

    <loadproperties srcFile="${build.dir}/build.properties"/>

  	<echo message="VERSION: ${plugin.version}" />
    <echo message="Tag    : ${tag}" />
    <echo message="BUILD  : ${build.number}" />
    <echo message="JAVA   : ${java.version}" />

    <path id="compilepath">
      <pathelement path="${define.compilepath}" />
      <!-- wird fuer die Update class-Files gebraucht //-->
      <fileset dir="${lib.dir}">
        <include name="**/*.jar" />
      </fileset>
    </path>
  </target>

  <target depends="init" name="update" description="performs scm update">
    <exec executable="git" failonerror="true" dir="${basedir}">
      <arg line="pull" />
    </exec>
  </target>

  <target depends="init" name="compile" description="compiles everything">

    <mkdir dir="${class.dir}" />

    <javac debug="true"
           includeantruntime="false"
           debuglevel="lines,vars,source"
           source="${define.java.version}"
           target="${define.java.version}"
           encoding="${define.encoding}"
           deprecation="true"
           destdir="${class.dir}" srcdir="${src.dir}">
      <classpath refid="compilepath" />
    </javac>

    <copy todir="${class.dir}/help">
      <fileset dir="${help.dir}" />
    </copy>
    <copy todir="${class.dir}/img">
      <fileset dir="${img.dir}" />
    </copy>
    <copy todir="${class.dir}/lang">
      <fileset dir="${lang.dir}" />
    </copy>

  </target>



  <target depends="compile" name="tag" description="tags the source in the scm">

    <exec executable="git" failonerror="true" dir="${basedir}">
      <arg line="tag -m ${tag} ${tag}" />
    </exec>
    <exec executable="git" failonerror="true" dir="${basedir}">
      <arg line="push origin ${tag}" />
    </exec>

  </target>


  <target depends="compile" name="jar" description="generates the jar file">

    <mkdir dir="${project.release}" />
    <mkdir dir="${project.zipdir}" />

    <tstamp />
    <jar destfile="${project.zipdir}/${define.jarfilename}">
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Built-Date" value="${DSTAMP}" />
        <attribute name="Implementation-Title" value="${plugin.name}" />
        <attribute name="Implementation-Version" value="${plugin.version}" />
        <attribute name="Implementation-Buildnumber" value="${build.number}" />
        <attribute name="Class-Path" value="lang help" />
      </manifest>
      <fileset dir="${class.dir}" />
    </jar>
  </target>

  <target depends="jar" name="signjar" description="signs the zip files">
 <!--
  	<loadfile property="storepass" srcFile="${signjar.storepass}" />
    <exec executable="jarsigner" failonerror="true" timeout="60000">
      <arg line="-verbose -keystore ${signjar.keystore} -storepass ${storepass} ${project.zipdir}/${define.jarfilename} &quot;${signjar.alias}&quot;" />
    </exec>
 -->
  </target>

  <target depends="jar" name="zip" description="generates the zip files">

    <mkdir dir="${project.zipdir}/sql" />
    <copy todir="${project.zipdir}/sql">
      <fileset dir="${sql.dir}" />
    </copy>

    <mkdir dir="${project.zipdir}/lib" />
    <copy todir="${project.zipdir}/lib">
      <fileset dir="${lib.dir}" />
    </copy>

    <mkdir dir="${project.zipdir}/icons" />
    <copy todir="${project.zipdir}/icons">
      <fileset dir="${icon.dir}" />
    </copy>

    <mkdir dir="${project.zipdir}/updates" />
    <javac debug="true"
           includeantruntime="false"
           debuglevel="lines,vars,source"
           source="${define.java.version}"
           target="${define.java.version}"
           encoding="${define.encoding}"
           deprecation="true"
           destdir="${project.zipdir}/updates"
           srcdir="${update.dir}">
      <classpath refid="compilepath" />
    </javac>
    <copy todir="${project.zipdir}/updates">
      <fileset dir="${update.dir}">
        <exclude name="*.java" />
      </fileset>
    </copy>

    <copy file="plugin.xml" todir="${project.zipdir}" />
    <copy file="${basedir}/LICENSE" todir="${project.zipdir}" />
    <copy file="${basedir}/COPYING" todir="${project.zipdir}" />


    <!-- Jetzt muessen wir noch das ZIP-File erzeugen und signieren -->
    <zip destfile="${project.release}/${define.zipfilename}">
      <fileset dir="${project.release}">
        <include name="${plugin.name}" />
        <include name="${plugin.name}/**" />
      </fileset>
    </zip>

  </target>

  <target depends="signjar,zip" name="signzip" description="generates a signed zip file" />



  <target depends="init" name="src" description="build source package, depends compile target to make sure, the code has no errors">
    <mkdir dir="${project.release}" />
    <mkdir dir="${project.tmp}/${plugin.name}" />
    <copy todir="${project.tmp}/${plugin.name}">
      <fileset dir="${basedir}">
        <include name=".project" />
        <include name=".classpath" />
        <include name="plugin.xml" />
        <include name="LICENSE" />
        <include name="COPYING" />
        <include name="${update.dir}/**" />
        <include name="${lib.dir}/**" />
        <include name="${src.dir}/**" />
        <include name="${icon.dir}/**" />
        <include name="${sql.dir}/**" />
        <include name="${build.dir}/**" />
        <exclude name="${build.dir}/BUILD" />
      </fileset>
    </copy>
    <zip casesensitive="true" zipfile="${project.release}/${define.srcfilename}">
      <fileset dir="${project.tmp}">
        <include name="${plugin.name}/**" />
      </fileset>
    </zip>
  </target>



  <target depends="jar" name="javadoc" description="creates the api doc">

    <mkdir dir="${project.javadoc}" />

    <javadoc charset="${define.encoding}" docencoding="${define.encoding}" encoding="${define.encoding}"
             destdir="${project.javadoc}" packagenames="${define.package}.*">
      <classpath refid="compilepath" />
      <sourcepath>
        <pathelement location="${src.dir}" />
      </sourcepath>
    </javadoc>

    <zip casesensitive="true" zipfile="${project.release}/${define.javadocfilename}">
      <fileset dir="${project.javadoc}">
        <include name="**" />
      </fileset>
    </zip>

  </target>


  <target name="sign" description="signs the jar/zip file" depends="zip,src">
    <echo message="Creating checksum files" />
    <checksum format="MD5SUM" algorithm="SHA" file="${project.release}/${define.zipfilename}" />
    <checksum format="MD5SUM" algorithm="SHA" file="${project.release}/${define.srcfilename}" />
    
    <echo message="Creating PGP signatures" />
    <exec executable="gpg" failonerror="true" timeout="60000">
      <arg line="-asb --use-agent ${project.release}/${define.zipfilename}" />
    </exec>
    <exec executable="gpg" failonerror="true" timeout="60000">
      <arg line="-asb --use-agent ${project.release}/${define.srcfilename}" />
    </exec>

  	<!-- Die wird fuer jameica.update zum Pruefen des Downloads verwendet -->
    <echo message="Creating SHA1 signatures" />
  	<!-- 
    <loadfile property="storepass" srcFile="${signjar.storepass}" />
 
    <java classname="de.willuhn.security.Signature" failonerror="true" dir="${project.release}" fork="true">
      <classpath refid="compilepath" />
      <arg line="sign -keystore ${signjar.keystore} -storepass ${storepass} -alias &quot;${signjar.alias}&quot; -keypass ${storepass} -file ${define.zipfilename} -sig ${define.zipfilename}.sha1"/>
    </java>
      --> 
  </target>

	<target name="clean" description="cleanup">
    <delete dir="${project.tmp}" />
    <delete dir="${project.javadoc}" />
    <delete dir="${project.zipdir}" />
  </target>



  <target depends="init,compile,tag,signzip,javadoc,src,sign,clean" description="build an official release" name="all" />

  <target depends="init,compile,zip,src,clean" description="build inofficial release" name="fast" />

  <target depends="init,compile,zip,javadoc,src" description="build nightly build" name="nightly">
    <mkdir dir="${project.nightly}" />

    <copy file="${project.release}/${define.zipfilename}" todir="${project.nightly}" />
    <copy file="${project.release}/${define.srcfilename}" todir="${project.nightly}" />

    <!-- Die Datei brauchen die anderen Plugins zum Kompilieren //-->
    <copy file="${project.zipdir}/${define.jarfilename}" tofile="releases/hibiscus-lib.jar" />

    <delete dir="${project.release}" />
  </target>

</project>
